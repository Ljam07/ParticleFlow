### Evenly Distribute points among faces ###

####################################
########### Needs Tests ############
####################################

To place exactly N points, evenly within a grid in a cube, the points lie on a 3d grid
with the same number of divisions among the x, y, and z axes. If you lets m be the number of
divisions per axis, then you idealy have:
    m^3 = N

For an exact grid, N should be a perfect cube. If not, m cane be ceil(N^(1/3)) to get a least 
N candidate positions.

Assume the cube spans from 0 to L ( for a unit cube, L = 1). when you divide this length into m
segments, the cell or grid cell size is: 
    d = L / m

If you want to place the point at the center of each cell, the coordinate along, say the x-axis
for cell index i (from range 0 to m-1) would be:
    x = (i + 0.5)d
This centres the point in each subdivided agment. The same logic applies to x and z dimensions.

Using 3 nested loops - one for each axis - you iterate over all indices (i, j, k) and compute
a point's position using the previous formulas. This method ensures even spacing between adjacent
points (at least in each axis).

if m^3 is greater than N, you can either pick the first N points from the ordered grid, or choose 
points in a more cllever way to keep them as uniformly distributed as possible(for example, 
by sampling the grid in an interleaved pattern).



### GPU Mesh Instancing From Points ###
To draw many little spheres in one go, you need to create 1 static "unit-sphere" in v-ram,
then supply the per-instance data(pos, radius, colour) to the vertex shader via a second VBO
with divisor = 1